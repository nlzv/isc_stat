ROUTINE stat.tempdb
#define DBG 0
#; global directory size of global in blocks number
#; main entry points
#;   report(logfile)
#;   onDBSizeInc(szinc,delay,logfile,tempdbgszReportDir,gszReportBase="tempdbgsz")
#;   glodir(dirbid,.glosz)
#;      dirbid - block number of block directory
#;      glosz(glo)=$Lb(bbn,dbn,bign) bbn bottom, dbn data, big blocks number.
#;      O 63:"^^"_dbdir and blksize public variable should be done before call

#; generate report when tempdb extends more than szinc MB
#; szinc in MB (2*20)
#; delay time in seconds between poll
#; logfile of increasing database over limit
#;   default tmpdbszReportDir_tempdbsz.log
#; tempgszReportDir
#;   directory of tempdb globals sizes reports
#;   should contains directory separator at the end of directory name
#; default mgr directory
#; gszreport prefix of globals sizes report on database expansion, after prefix - timestamp
onDBSizeInc(szinc,delay=10,logfile,tempdbgszReportDir,gszReportBase="tempdbgsz")
 if $D(^rOBJ("stat.lib")) {
   set platformtype=$$platformtype^stat.lib
   if platformtype="unix" { try { do sumask^stat.lib("rw-rw----") } catch {} }
   set fsdlm=$$fsdlm^stat.lib
 }
 else {
   if $zversion(1)=3 set umask=$zu(47,79)
   set fsldm=$E($zu(12),*)
 }
 set tempdbgszReportDir=$G(tempdbgszReportDir,$zu(12))
 set logfile=$G(logfile,tempdbgszReportDir_"tempdbsize.log")
 set tempdbid=$zu(173)
#if 1
 try { set dbdir=$P($zu(49,tempdbid,3),"^",2) } catch { set dbdir="" }
#else
 set dbdir=$zu(12)_"cachetemp"
#endif
 if dbdir="" { quit $LB(0,"unable to determine tempdb directory") }
 set dirinfo1=$zu(49,dbdir)
 set dbsz1=$P(dirinfo1,",",4)
 set blksize=$P(dirinfo1,",",2)
 set io=$io
 set lfto=1
 if '##class(%Library.File).Exists(logfile) { open logfile:("NWS"):lfto }
 else {  open logfile:("WSA"):lfto }
 if $test=1 {
   use logfile W $zdt($h,3)," increment tempdb size monitor started",!
   W " blksize="_blksize,!
   W " expand blocks number  ",$P(dirinfo1,",",5),!
   W " max blocks number limit ",$P(dirinfo1,",",6),!
 }
 else { do:$D(umask)#2=1 $zu(47,umask) quit }
 use io close logfile
 set h1=$h
 for {
   hang delay
   set h2=$h set dirinfo2=$zu(49,dbdir) set dbsz2=$P(dirinfo2,",",4)
   if dbsz2-dbsz1>szinc { do log(logfile,tempdbgszReportDir,gszReportBase) set dbsz1=dbsz2 set h1=h2}
 }
 quit
#; log expand event and generate globals sizes report
log(logfile,tempgszReportDir,gszReportBase)
 if '##class(%Library.File).Exists(logfile) { open logfile:("NWSA"):lfto }
 else {  open logfile:("WSA"):lfto }
 if $T'=1 quit
 set io=$io use logfile
 W $zdt(h2,3)_" expanded "_(dbsz2-dbsz1)_"M, current size "_dbsz2_"M"_
   ", old size="_dbsz1_"M at "_$zdt(h1,3),!
 do report(tempdbgszReportDir_gszReportBase_"_"_$tr($zdt($h,3)," :-","___")_".log")
 use io close logfile
 quit
 
#; temp db globals sizes report in logfile
report(logfile)
 new blksize,dirinfo,glosz,io,lfto,tempdbdir,tempdbid
 set lfto=1
 set logfile=$G(logfile,$zu(12)_"tempdb.log")
 #; stupid overwrite old file
 open logfile:("NWS"):lfto
 if $test'=1 quit $LB(0,"open",logfile)
 set io=$io use logfile
 set product=$P($SYSTEM.Version.GetProduct()," ",1)
#if 1
 set tempdbid=$zu(173)
 try { set tempdbdir=$P($zu(49,tempdbid,3),"^",2) } catch { set tempdbdir="" }
#else
 if product="IRIS" { set tempdbdir=$zu(12)_"iristemp" }
 elseif product="Cache" { set tempdbdir=$zu(12)_"cachetemp" }
#endif
 if tempdbdir="" { W "unable determine tempdbdir",! quit $LB(0,"unable determine tempdbdir") }
 set dirinfo=$zu(49,tempdbdir)
 set blksize=$P(dirinfo,",",2)
 W "reports of temp and PPG globals sizes at "_$zdt($h,3),!
 W "legends: number of blocks bottom ptr, data, bigdata ",!
 do doreport()
 use io close logfile
 quit $LB(1)

#; collect info and do report
doreport() [tempdbdir,blksz,dirinfo,glosz] public {
 open 63:"^^"_tempdbdir
 kill glosz
 set dirglobid=$P(dirinfo,",",7)
 do glodir(dirglobid)
 do reportout
 #; PPG
 set maxjid=$V($ZU(40,2,118),-2,"4o")
 for jid=0:1:maxjid {
   set pid=$zu(61,17,jid)
   if pid'=0 {
     set ppgsz=$zu(61,33,jid)
     set ppgptr=$zu(61,25,jid) /* dsid^bid */
     set ppglodirbid=$P(ppgptr,"^",2)
     if ppgsz'=0 {
       #; indexing by used blocks
       set ppgblk(ppgsz)=jid
       kill glosz
       do glodir(ppglodirbid)
       do reportoutppg(jid,pid,ppgsz)
     }
   }
 }
 quit
}
glodir(dirbid) [blksize,glosz] public {
 set bid=dirbid
 set glosz=$LB(0,0,0)
 for {
    view bid
    #; if there is no nodes in block $V(even) generates error <FUNCTION>
    #; check data offset against minimal node len
    if $view($zu(40,32,0),0,"4o")<4 quit
    set nextbid=$view($zu(40,32,4),0,"4o")
    for i=0:1 {
      set glo=$view(i*2+1,-5)
      set globid=$view(i*2+2,-5)
      if glo="" quit
      set szlist=$$topptrblk(globid)
      set glosz(glo)=szlist
      #; summarize all for globals: bottom ptr, data, big data blocks
      #; and all blocks for given global
      set an=0 for i2=1:1:3 { set $LI(glosz,i2)=$LI(glosz)+$LI(szlist,i2) set an=an+$LI(szlist,i2) set $LI(glosz,4)=an }
    }   
    quit:nextbid=0
    set bid=nextbid
 }
 quit
}
topptrblk(topbid) [blksize] public {
 set bid=topbid
 set savedblk=$V(0,0,-blksize)
 set bptrn=0,bdatan=0,bbign=0
loop
 view bid
 set blktype=$V($zu(40,32,1),0,1)
 if blktype=6||(blktype=70) {
   do b1ptr(.bptrn,.bdatan,.bbign)
 }
 else {
  #; it is not bottom pointer go down 
  set downbid=$V(2,-5)
  if +downbid'=0 { set bid=downbid goto loop }
 }
 #; restore block data in view buffer
 view 0:0:-blksize:savedblk
 quit $LB(bptrn,bdatan,bbign)
}
 
 #; 1st bottom pointer
b1ptr(bptrn,bdatan,bbign) [blksize] public {
 set issavedblk=0
 set bptrn=1,bdatan=0,bbign=0
loop
 for i=0:1 {
    #; it might be unsafe to use $V(odd,-5) due to <SUBSCRIPT> error for some node, for example PPG
    #;set ref=$V(i*2+1,-5)
    set bref=$V(i*2+1,-6)
    set x=$V(i*2+2,-6)
    set bdatan=bdatan+1
    quit:x=""
    set big=$P(x,",",1),dbid=$P(x,",",2)
    if big {
      if issavedblk=0 { set issavedblk=1 set savedblk=$V(0,0,-blksize) }
      do big(dbid,.bbign)
    }
 }
 set nextbid=$V($zu(40,32,4),0,"4o") if nextbid { view nextbid set bptrn=bptrn+1 goto loop }
 if issavedblk view 0:0:-blksize:savedblk
 quit
}
big(bid,&bbign) [blksize] public {
 set savedblk=$V(0,0,-blksize)
 view bid
 for i=1:1 {
   set x=$V(i*2,-6)
   quit:x="" 
   set type=$A($E(x))
   set x=$E(x,3,$L(x))
   if type=3 { set bbign=bbign+$P(x,",") }
 }
 view 0:0:-blksize:savedblk
 quit
}

reportout() [glosz] public {
 W " temporary globals",!
 set g="" for { set g=$O(glosz(g),1,d) quit:g=""
   W "  "_$LG(d,1)_","_$LG(d,2)_","_$LG(d,3)_","_g,!
 }
 Q
}
reportoutppg(jid,pid,ppgsz) [glosz]  public {
 W " PPG jid="_jid_", pid="_pid,", blocks=",ppgsz,", ns=",$zu(61,6,jid),",routine=",$zu(61,5,jid),!
 set g="" for { S g=$O(glosz(g),1,d) quit:g=""
   W "  "_$LG(d,1)_","_$LG(d,2)_","_$LG(d,3)_","_g,!
 }
 Q
}
#; populate tempdb
#; glo="^CacheTemp" or glo="^||CacheTemp"
popu(glo,nglo,nk,dlenmin,dlenmax) public {
 set d=$J("",dlenmax)
 set dl=dlenmax-dlenmin+1
 for i1=1:1:nglo { set g=glo_i1 for i2=1:1:nk { set l=dlenmin+$R(dl) set @g@(i2)=$E(d,1,l) } }
 Q
}

