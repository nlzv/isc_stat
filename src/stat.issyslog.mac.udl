ROUTINE stat.issyslog
#; collecting system errpr logsyslog, what SYSLOG (public INT source code) utility collect but without lost due to cyclic buffer
#include stat
#; definition for constants
#;#define osm
#; statmon=1 run in frame of stat monitor
#; statmon=9 run standlalone
#; log file collect to, one is used only if statmon=0
log(statmon=0,log="")
 $$$PROCMODTRAP
 set platformtype=$$platformtype^stat.lib()
 if platformtype="unix" { try { do sumask^stat.lib("rw-rw-r--") } catch {} }
 set logid=1 set stop=0
 if $G(statmon,0)=1 {
   do NoJournal^stat.lib()
   set CtlGlo=$$CtlGlo^stat.lib set logdir=$$logdir^stat.lib
   set DaemonName=$$DaemonName set DaemonSignal=$$DaemonSignal
   if $SYSTEM.Event.Defined(DaemonSignal) $$$MsgLog($ZNAME_"exit error daemon event exists "_DaemonSignal,$$$MsgLogError) quit
   set retSignal=$SYSTEM.Event.Create(DaemonSignal)
   if retSignal=0 $$$MsgLog($ZNAME_"exit error failure create event "_DaemonSignal,$$$MsgLogError) quit
#; register itself in CtlGlo process table
   do CtlGloSelfProcStart^stat.lib(DaemonName)
#; send signal to monitor, register daemon in monitor proc("daemon") var
   do procstart^stat.monitor($$$SelfJid,$J,$$$SelfPteuc,DaemonName)
   if $G(log)="" { set hinit=$h set log=$$logfile(logdir,$$logprefix,hinit) }
   set logtabindexOld=$G(@CtlGlo@("issyserr","processed logtabindex"),-1)
 }
 else {
   set nojrnsaved=$$CURRNET^%SYS.NOJRN() if nojrnsaved=1 { do DISABLED^%SYS.NOJRN() }
   if $G(log)="" set log=$zu(12)_"syslog.log"
 }
 do init
 open log:("NWS"):1 if $test=0 goto runexit
 use log
#; working loop
 for {
   set logtabindex=$view(plogtab+4,-3,4)
   set logtabsize=$view(plogtab,-3,4)
#; index = (index++) # tabsize;
#; ? process entry index wrap around special way
#; if logtabindexOld+1>logtabindex do scan(+logtabindexOld+1,2**32-1) set logtabIndexOld=-1
   if logtabindexOld+1'=logtabindex do scan(+logtabindexOld+1,logtabindex-1)
   set logtabindexOld=logtabindex-1
   if statmon=1 {
     set retSignal=$SYSTEM.Event.WaitMsg(DaemonSignal,polltime)
     if $LG(retSignal)=1 {
       set msg=$LG(retSignal,2) set cmd=$LG(msg,1)
       if cmd="terminate" set exitreason=$LG(msg,2) set stop=1 quit
       do SignalHandler
     }
     if stop=1 quit
   }
   else { hang polltime }
 }
runexit
 if statmon {
   try { do CtlGloSelfProcStop^stat.lib(DaemonName) } catch {}
   try { do procstop^stat.monitor($$$SelfJid,$J,$$$SelfPteuc,DaemonName) } catch {}
   try { if $G(keepSignal,0)=0 { set ret=$SYSTEM.Event.Delete(DaemonSignal) } } catch {}
#;  try { lock -@DaemonLock } catch {}
   if $G(exitreason)="shutdown" { kill @CtlGlo@("issyserr","processed logtabindex") }
   else { set @CtlGlo@("issyserr","processed logtabindex")=$G(logtabindexOld,-1) }
 }
 else {
  if $G(nojrnsaved,0)=1 do ENABLE^%SYS.NORJN()
 }
 try { close log } catch {}
 quit
DaemonError
 set $ztrap="" do $zu(9,"",$ZNAME_" exit error $ZE="_$ZE,0,0) goto runexit
 quit
scan(syslogid1,syslogid2)
 set syslogid1=syslogid1#logtabsize
 set syslogid2=syslogid2#logtabsize
 if syslogid2<syslogid1 for syslogid=syslogid1:1:logtabsize-1 { do logentry(syslogid,logid) set logid=logid+1 } set syslogid1=0
 for syslogid=syslogid1:1:syslogid2 { do logentry(syslogid,logid) set logid=logid+1 }
 quit
#; get syslog entry and write it in log
#; index syslog index
#; logid icnremental id of log generated daemon
logentry(index,logid)

 set offset=plogstr+(logstrsize*index)
 set err=$view(offset+$zu(40,31,1),-3,4)
 set pid=$view(offset+$zu(40,31,2),-3,4 /* size of pidtype $zu(40,0,77)*/)
 set time=$view(offset+$zu(40,31,3),-3,$zu(40,0,55) /* size of time_t*/)
 set mod=$V(offset+$zu(40,31,4),-3,4)
#; source code location
 set len=$V(offset+$zu(40,31,5),-3,charsize)
 if len>0 { set codeloc=$view(offset+$zu(40,31,5)+charsize,-3,"-"_len_cast) }
 else { set codeloc="" }
#; namespace
 set len=$view(offset+$zu(40,31,10),-3,charsize)
 set ns=$view(offset+$zu(40,31,10)+charsize,-3,"-"_len_cast)
#; client
 set len=$view(offset+$zu(40,31,6),-3,charsize)
 if len>0 { set client=$V(offset+$zu(40,31,6)+charsize,-3,"-"_len_cast) }
 else { set client="" }
#; client ip
 set len=$view(offset+$zu(40,31,7),-3,charsize)
 if len>0 { set ip=$view(offset+$zu(40,31,7)+charsize,-3,"-"_len_cast) }
 else { set ip="" }
#; user name
 set len=$view(offset+$zu(40,31,8),-3,charsize)
 if len>0 { set user=$view(offset+$zu(40,31,8)+charsize,-3,"-"_len_cast) }
 else  { set user="" }
 set len=$view(offset+$zu(40,31,9),-3,charsize)
 if len>0 { S exe=$view(offset+$zu(40,31,9)+charsize,-3,"-"_len_cast) }
 else { set exe="" }
 W logid,",",err,",",pid,",",$zdt($zu(99,0,time),3),",",mod\65536,",",mod#65536,",",ns,",",codeloc,",",client,",",ip,",",user,",",exe,!
 quit
init
 set plogtab=$view($zu(40,2,39),-2,"S")
 set logtabsize=$view(plogtab,-3,4)
 set logstrsize=$zu(40,0,16)
 set plogstr=plogtab+8
 set charsize=$zu(40,0,70)
 set cast="" if charsize=2 set cast="w"
 set logtabindexOld=$G(logtabindexOld,-1)
 set logtabindex=$view(plogtab+4,-3,4)
#;if logtabindex>logtabsize set logtabindexOld=logtabindex-logtabsize+1
 set polltime=1
 quit
SignalHandler
 if cmd="switchlog" {
   close log
   set hinit=$h
   set log=$$logfile(logdir,$$logprefix,hinit)
   if $G(%debug("daemon","islog"),0) do $zu(9,"",$ZNAME_" log="_$G(log))
   open log:("NWS"):1
   if $test { use log }
   else {
     set exitreason="create log file"
     $$$ConLog(DaemonName_" terminated: "_exitreason_" "_log)
     set stop=1
   }
 }
 quit
#; api start daemon
start() public { job log(1) quit $zchild }
#; api stop daemon
stop(reason="") public { set ret=$SYSTEM.Event.Signal($$DaemonSignal,$LB("terminate",$G(reason))) }
DaemonSignal() public { quit "^"_$ZNAME }
DaemonName() public { quit "syserrlog" }
DaemonLock() public { quit "^"_$ZNAME }
logprefix() public { quit "stat_issyserrlog"}
logfile(logdir,prefix,hinit) public { set log=logdir_prefix_"_"_$$$LogTSName(hinit)_".log" quit log }
#; documentation on record fields, either comma separated
#; 1 unique id incremental
#; 2 errno
#; 3 pid
#; 4 odbc time stamp
#; 5 id of source file
#; 6 source file line
#; 7 namespace
#; 8 code location
#; 9 client
#; 10 ip
#; 11 cache username
#; 12 exe
statmetainfo() public {
 quit $LB(
   $LB("id","unique incremental id"),
   $LB("errno","system error number"),
   $LB("pid","system process identifier"),
   $LB("time",""),
   $LB("module","id of c source file"),
   $LB("line","c line number"),
   $LB("iscodelocation","intersystem code locaiton"),
   $LB("client","?"),
   $LB("ip","client ip"),
   $LB("user","cache username"),
   $LB("exe","client executable"),
 )
}
