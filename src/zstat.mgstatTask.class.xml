<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26">
<Class name="zstat.mgstatTask">
<IncludeCode>%occErrors</IncludeCode>
<Super>%SYS.Task.Definition</Super>
<TimeCreated>66819,44190.502789436</TimeCreated>

<Parameter name="TaskName">
<Default>mgstatSysTask</Default>
</Parameter>

<Property name="rate">
<Description><![CDATA[
time between samples in seconds, default 1 second<br/>]]></Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="seconds between samples, default 1"/>
</Property>

<Property name="LogDir">
<Description><![CDATA[
if it is empty then default mgr/pButtons of cache/iris installation<br/>]]></Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="logs directory, default instance mgr"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
/*
/// compress mgstat log after it completion for time period<br/>
/// requires %Library.zip class<br/>
Property zip As %Boolean(CAPTION = "zip log");
*/
]]></Content>
</UDLText>

<Property name="removeAdjustSpaces">
<Description>
remove spaces adjusment in mgstat before possible compression</Description>
<Type>%Boolean</Type>
<Parameter name="CAPTION" value="remove adjust spaces"/>
</Property>

<Property name="KeepDays">
<Description><![CDATA[
how long days to keep mgstat logs<br/>
0 means keep forever<br/>]]></Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="days to keep logs, 0/&apos;&apos; keep forever"/>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set $ztrap="error"
 if ..rate="" { set delay=1 }
 else { set delay=..rate }
 set count=86400-$piece($h,",",2)/delay\1
 set fsdlm=$E($zu(12),*)
 set logdir=..LogDir
 if $G(logdir)="" set logdir=$zu(12)
 if $E(logdir,*)'=fsdlm set logdir=logdir_fsdlm
 if '##class(%File).DirectoryExists(logdir) { quit $SYSTEM.Status.Error($$$GeneralError,"no logdir") }
 set logfile="mgstat."_..logname($h)_".log"
 set logfpfile=logdir_logfile
#; check file might be created
 if '..checkLogWriting(logfpfile) { quit $SYSTEM.Status.Error($$$GeneralError,"log file error create or writing") }
 do ..findTaskId($this,.taskid)
 if taskid="" quit $SYSTEM.Status.Error($$$GeneralError,"failed to find task id")
 set rmspaces=..removeAdjustSpaces
 // set zip=..zip
 set zip=0
 set keepdays=..KeepDays
 if zip=1 && '$D(^rOBJ("%Library.zip.1")) { set zip=0 }
 job ..mgstat(delay,count,logfpfile,taskid,keepdays,rmspaces,zip)
 set zchild=$zchild
 if zchild>0 { quit 1 }
 else { quit $SYSTEM.Status.Error($$$GeneralError,"mgstat job failure") }
error
 set $ztrap="" quit $SYSTEM.Status.Error($$$GeneralError,"$ZE="_$ZE)
]]></Implementation>
</Method>

<Method name="mgstat">
<Description><![CDATA[
mgstat wrapper for post processing of the log<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>delay,count,logfile,taskid,keepdays,rmspaces,zip</FormalSpec>
<Implementation><![CDATA[
#; unix set more reasonable file mode
 if $zversion(1)=3 { set oldumask=$zu(47,79) }
 do ^mgstat(delay,count,logfile)
 if rmspaces=1 { do ..transform(logfile) }
#; zip todo
#; register log
 set ^|"^^"_$ZU(12)|SYS("Task","TaskD",taskid,1,logfile)=""
#; removeold 
 if +keepdays'=0 { do ..RemoveOld(taskid,+keepdays) }
]]></Implementation>
</Method>

<Method name="transform">
<Description><![CDATA[
transform log, defat spaces<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>logfile</FormalSpec>
<Implementation><![CDATA[
 set io=$io
 set logout=logfile_".tmp"
 set oldeof=$SYSTEM.Process.SetZEOF(1)
 try { close logfile } catch {}
 open logfile:("RS"):1 if $test'=1 { quit $LB(0,"open in file") }
 try { close logout } catch {}
 open logout:("NW") if $test'=1 { close logfile quit $LB(0,"create out file") }
 use logfile read tx
 use logout write tx
 for {
   use logfile read tx quit:$zeof=-1
   set txout=$translate(tx," ","")
   use logout write txout,!
 }
 set retdel=##class(%File).Delete(logfile,.retout)
 set retmv=##class(%File).Rename(logout,logfile,.retout)
 use io close logfile close logout
]]></Implementation>
</Method>

<Method name="RemoveOld">
<ClassMethod>1</ClassMethod>
<FormalSpec>taskid,KeepDays</FormalSpec>
<Implementation><![CDATA[
 set $ztrap="error"
 set fsdlm=$E($zu(12),*)
 set KeepsDays=KeepDays\1
 if KeepsDays=0 { set hdlmt="" }
 else { set hdlmt=$P($h,",",1)-KeepsDays }
 set logfile="" for {
   set logfile=$order(^|"^^"_$ZU(12)|SYS("Task","TaskD",taskid,1,logfile)) quit:logfile=""
#; extract day part
    set filename=$P(logfile,fsdlm,$L(logfile,fsdlm))
    set t=$P(filename,".",2)
    set y=$E(t,1,4)
    set m=$E(t,6,7)
    set d=$E(t,9,10)
    try { set hd=$zdateh(y_m_d,8) } catch { continue }
    if hdlmt="" || (hd<hdlmt) {
      set ret=##class(%File).Delete(logfile,.outret)
#; remove from log of mgstat logs
      kill ^|"^^"_$ZU(12)|SYS("Task","TaskD",1,logfile)
    }
 }
 quit
error
 set $ztrap="" do $zu(9,"",$ZNAME_":RemoveOld() $ZE="_$ZE,0,2)
 quit
]]></Implementation>
</Method>

<Method name="logname">
<Description><![CDATA[
yyyy_mm_dd_hh_mm_ss</br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>h</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ quit $tr($zdt(h,3)," :-","___")
]]></Implementation>
</Method>

<Method name="findTaskId">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[self,&taskid]]></FormalSpec>
<Implementation><![CDATA[
 set o="" for {
   set o=$zobjnext(o) quit:o=""
   if $classname(o)="%SYS.Task" {
     if o.TaskClass=$this { set taskobj=o }
   }
 }
 if $isobject(taskobj) {
   set taskid=taskobj.%Id()
#;   do $zu(9,"","mgstatSysTask taskid="_taskobj.%Id())
 }
]]></Implementation>
</Method>

<Method name="checkLogWriting">
<ClassMethod>1</ClassMethod>
<FormalSpec>logfile,err</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 set $ztrap="error" set err=0
 open logfile:("NWS"):1 if $test'=1 { quit 0 }
 use logfile write "test",!
 close logfile
 set ret=##class(%File).Delete(logfile)
 quit 1
error
 set $ztrap="" quit 0
]]></Implementation>
</Method>

<Method name="install">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 set taskid=""
 set classname=..%ClassName(1)
 set taskn=0
#; traverse all system tasks
 set id="" for {
   set id=$order(^|"^^"_$ZU(12)|SYS("Task","TaskD",id),1,d) quit:id=""
   if $LI(d,15)=classname set taskid=id set taskn=taskn+1
 }
 if taskid'="" {
   W "system task for mgstat with task class "_classname_" already exists",!
   R "do you want to create another one?01YyNn>",answer,!
   if "0Nn"[answer quit
 }

 set task=##class(%SYS.Task).%New()
 set task.Name="mgstatTask"_$case(taskn,0:"",:taskn)
 set task.Description="collecting mgstat"
 set task.TaskClass=classname
#; run daily at mightnight
 set task.TimePeriod=0
 set task.TimePeriodEvery=1
 set task.DailyFrequency=0
 set task.DailyStartTime="5"
 set ret=task.%Save()
 set taskid=task.%Id()
 if +ret=1 { W "task for mgstat is created with taskid=",taskid,! }
 else {
   W "task for mgstat is failed",! 
   kill errtext do $SYSTEM.Status.DecomposeStatus(ret,.errtext,,"en")
   W errtext(1),!
 }
]]></Implementation>
</Method>

<Method name="uninstall">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 set classname=..%ClassName(1)
#; traverse all system tasks
 set id="" for {
   set id=$order(^|"^^"_$ZU(12)|SYS("Task","TaskD",id),1,d) quit:id=""
   if $LI(d,15)=classname {
     set ret=##class(%SYS.Task).%DeleteId(id)
     W "remove taskid="_id
     if ret=1 {  W " ok",! }
     else {
       kill errtext do $SYSTEM.Status.DecomposeStatus(ret,.errtext,,"en")
       W "error",!," ",errtext(1),!
     }
   }
 }
]]></Implementation>
</Method>

<Method name="testerror">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 W "before"
 do $SYSTEM.Status.DisplayError($SYSTEM.Status.Error(5001,"test"))
 W !,"after"
]]></Implementation>
</Method>

<Method name="PurgeLogs">
<Description>
if KeepDays = 0 remove all logs, besides one is writing currently.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>taskid,KeepDays</FormalSpec>
<Implementation><![CDATA[ do ..RemoveOld(taskid,KeepDays)
]]></Implementation>
</Method>
</Class>
</Export>
